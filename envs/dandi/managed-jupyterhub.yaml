# WARNING: This file is managed by a script.
# Any changes made to this file will be overwritten.
# DO NOT EDIT THIS FILE MANUALLY.
cull:
  enabled: true
  every: 300
  timeout: 3600
global:
  safeToShowValues: false
hub:
  authenticatePrometheus: false
  command:
    - sh
    - -c
    - pip install boto3 && jupyterhub --config /usr/local/etc/jupyterhub/jupyterhub_config.py
  config:
    Authenticator:
      admin_users:
        - asmacdo
        - dandibot
        - satra
        - yarikoptic
    GitHubOAuthenticator:
      client_id: ${client_id}
      client_secret: ${client_secret}
      oauth_callback_url: https://${jupyterhub_domain}/hub/oauth_callback
      scope:
        - read:user
        - read:gist
        - user:email
  db:
    pvc:
      storage: 50Gi
      storageClassName: gp3
  extraConfig:
    myConfig: |
      # Python executed by jupyterhub at startup
      import json
      import logging
      import os
      import warnings
      from kubernetes_asyncio import client
      from oauthenticator.github import GitHubOAuthenticator
      from tornado.httpclient import AsyncHTTPClient, HTTPClientError, HTTPRequest

      logging.basicConfig(level=logging.INFO)
      lgr = logging.getLogger("Custom Z2JH config")

      def modify_pod_hook(spawner, pod):  # noqa
          pod.spec.containers[0].security_context = client.V1SecurityContext(privileged=True)
          return pod

      # define our OAuthenticator with `.pre_spawn_start`
      # for passing auth_state into the user environment
      # Based on <https://github.com/jupyterhub/oauthenticator/blob/master/examples/auth_state/jupyterhub_config.py>:  # noqa
      class IsDandiUserAuthenticator(GitHubOAuthenticator):
          async def check_allowed(self, username, auth_model):
              """
              Query DANDI API to ensure user is registered.
              """
              lgr.debug(f"Attempting to validate {username}")

              if auth_model["auth_state"].get("scope", []):
                  scopes = []
                  for val in auth_model["auth_state"]["scope"]:
                      scopes.extend(val.split(","))
                  auth_model["auth_state"]["scope"] = scopes
              auth_model = await self.update_auth_model(auth_model)

              # Allowed if admin
              if await super().check_allowed(username, auth_model):
                  lgr.info(f"User {username} is admin, automatically allowed")
                  return True

              dandi_api_credentials = json.loads('${dandi_api_credentials}')
              for api_domain, token in dandi_api_credentials.items():
                  if await self.verify_is_user(api_domain, token, username):
                      return True

              return False


          async def verify_is_user(self, api_domain, token, username):
              # Allowed if user is a registered DANDI user.
              req = HTTPRequest(
                  f"{api_domain}/api/users/search/?username={username}",  # noqa
                  method="GET",
                  headers={
                      "Accept": "application/json",
                      "User-Agent": "JupyterHub",
                      "Authorization": f"token {token}",
                  },
                  validate_cert=self.validate_server_cert,
              )
              try:
                  client = AsyncHTTPClient()
                  lgr.debug(f"Attempting to validate {username} with {api_domain}")
                  resp = await client.fetch(req)
              except HTTPClientError as e:
                  lgr.info(
                      f"Dandi API request to validate {username} returned HTTPClientError: {e}"
                  )
                  return False
              else:
                  if resp.body:
                      resp_json = json.loads(resp.body.decode("utf8", "replace"))
                      for val in resp_json:
                          if val["username"].lower() == username.lower():
                              lgr.info(f"User {username} is authorized by {api_domain}")
                              return True

              # If not explicitly allowed, not allowed.
              return False

          async def pre_spawn_start(self, user, spawner):
              auth_state = await user.get_auth_state()
              if not auth_state:
                  # user has no auth state
                  return
              # define some environment variables from auth_state
              spawner.environment["GITHUB_TOKEN"] = auth_state["access_token"]
              spawner.environment["GITHUB_USER"] = auth_state["github_user"]["login"]
              spawner.environment["GITHUB_EMAIL"] = auth_state["github_user"]["email"]
      c.KubeSpawner.modify_pod_hook = modify_pod_hook  # noqa
      c.JupyterHub.authenticator_class = IsDandiUserAuthenticator  # noqa
      c.GitHubOAuthenticator.enable_auth_state = True  # noqa
prePuller:
  continuous:
    enabled: false
  hook:
    enabled: false
proxy:
  https:
    enabled: true
    hosts:
      - ${jupyterhub_domain}
    type: offload
  service:
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '3600'
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
      service.beta.kubernetes.io/aws-load-balancer-ip-address-type: ipv4
      service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
      service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: ${ssl_cert_arn}
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: https
      service.beta.kubernetes.io/aws-load-balancer-type: external
scheduling:
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: false
    replicas: 1
  userPods:
    nodeAffinity:
      matchNodePurpose: require
  userScheduler:
    enabled: true
singleuser:
  allowPrivilegeEscalation: true
  cmd: null
  cpu:
    guarantee: 0.5
    limit: 12
  defaultUrl: /lab
  extraEnv:
    CHOWN_EXTRA: /home/shared
    CHOWN_HOME: 'yes'
    CHOWN_HOME_OPTS: -R
    GRANT_SUDO: 'yes'
    NOTEBOOK_ARGS: --allow-root
  extraPodConfig:
    securityContext:
      fsGroup: 100
  fsGid: 0
  initContainers:
    - command:
        - sh
        - -c
        - 'chmod 0775 /nfs; chown 1000:100 /nfs; chmod 0775 /shared; chown 1000:100
          /shared; chmod 0555 /readonly

          '
      image: alpine
      name: nfs-fixer
      securityContext:
        runAsUser: 0
      volumeMounts:
        - mountPath: /nfs
          name: persistent-storage
          subPath: home/{username}
        - mountPath: /shared
          name: persistent-storage
          subPath: shared
        - mountPath: /readonly
          name: persistent-storage
          subPath: readonly
  lifecycleHooks:
    postStart:
      exec:
        command:
          - sh
          - -c
          - 'gitpuller https://github.com/dandi/example-notebooks master dandi-notebooks;
            chown -R jovyan:users dandi-notebooks; datalad install https://github.com/dandi/dandisets;
            /opt/conda/envs/allen/bin/python -m ipykernel install --user --name allen
            --display-name "Python (Allen SDK)"; /opt/conda/bin/pip install --upgrade
            dandi; git config --global user.email "$${GITHUB_EMAIL}"; git config --global
            user.name "$${GITHUB_USER}"

            '
  memory:
    guarantee: 1G
    limit: 16G
  profileList:
    - description: 0.5 CPU / 1 GB
      display_name: Tiny. Useful for many quick things
      kubespawner_override:
        cpu_guarantee: 0.25
        cpu_limit: 2
        image_pull_policy: Always
        mem_guarantee: 0.5G
        mem_limit: 2G
        node_selector:
          NodePool: default
      profile_options:
        image:
          choices:
            allensdk:
              default: true
              display_name: AllenSDK
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-allensdk
            openscope:
              default: true
              display_name: OpenScope
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-openscope
            standard:
              default: true
              display_name: Standard
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}
          display_name: Image
    - description: 6 CPU / 16 GB up to 12C/32G. May take up to 15 mins to start.
      display_name: COSYNE Workshop (tmp)
      kubespawner_override:
        cpu_guarantee: 6
        cpu_limit: 12
        image_pull_policy: Always
        mem_guarantee: 16G
        mem_limit: 32G
        node_selector:
          NodePool: cpu-on-demand
      profile_options:
        image:
          choices:
            allensdk:
              display_name: AllenSDK
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-allensdk
            matlab:
              display_name: MATLAB (must provide your own license)
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-matlab
            openscope:
              display_name: OpenScope
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-openscope
            standard:
              default: true
              display_name: Standard
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}
          display_name: Image
    - default: true
      description: 6 CPU / 16 GB up to 12C/32G. May take up to 15 mins to start.
      display_name: Base
      kubespawner_override:
        cpu_guarantee: 6
        cpu_limit: 12
        image_pull_policy: Always
        mem_guarantee: 16G
        mem_limit: 32G
        node_selector:
          NodePool: default
      profile_options:
        image:
          choices:
            allensdk:
              default: true
              display_name: AllenSDK
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-allensdk
            matlab:
              display_name: MATLAB (must provide your own license)
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-matlab
            openscope:
              default: true
              display_name: OpenScope
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-openscope
            standard:
              default: true
              display_name: Standard
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}
          display_name: Image
    - description: 12C/32G up to 24C/64G. May take up to 15 mins to start.
      display_name: Medium
      kubespawner_override:
        cpu_guarantee: 12
        cpu_limit: 24
        image_pull_policy: Always
        mem_guarantee: 32G
        mem_limit: 64G
        node_selector:
          NodePool: default
      profile_options:
        image:
          choices:
            allensdk:
              default: true
              display_name: AllenSDK
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-allensdk
            matlab:
              display_name: MATLAB (must provide your own license)
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-matlab
            openscope:
              default: true
              display_name: OpenScope
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-openscope
            standard:
              default: true
              display_name: Standard
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}
          display_name: Image
    - description: 24C/64G up to 48C/96G. May take up to 15 mins to start.
      display_name: Large
      kubespawner_override:
        cpu_guarantee: 24
        cpu_limit: 48
        image_pull_policy: Always
        mem_guarantee: 64G
        mem_limit: 96G
        node_selector:
          NodePool: default
      profile_options:
        image:
          choices:
            allensdk:
              default: true
              display_name: AllenSDK
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-allensdk
            matlab:
              display_name: MATLAB (must provide your own license)
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-matlab
            openscope:
              default: true
              display_name: OpenScope
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}-openscope
            standard:
              default: true
              display_name: Standard
              kubespawner_override:
                image: ${singleuser_image_repo}:${singleuser_image_tag}
          display_name: Image
  serviceAccountName: ${jupyter_single_user_sa_name}
  startTimeout: 2400
  storage:
    extraVolumeMounts:
      - mountPath: /dev/fuse
        name: fuse
      - mountPath: /dev/shm
        name: shm-volume
      - mountPath: /home/jovyan
        name: persistent-storage
        subPath: home/{username}
      - mountPath: /shared
        name: persistent-storage-shared
        subPath: shared
      - mountPath: /readonly
        name: persistent-storage-shared
        readOnly: true
        subPath: readonly
    extraVolumes:
      - hostPath:
          path: /dev/fuse
        name: fuse
      - emptyDir:
          medium: Memory
        name: shm-volume
      - name: persistent-storage-shared
        persistentVolumeClaim:
          claimName: efs-persist-shared
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: efs-persist
    type: none
  uid: 0
